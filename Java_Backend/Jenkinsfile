def CONTAINER_NAME="politiesysteem"
def CONTAINER_TAG="latest"

env.BN = VersionNumber([
        versionNumberString : '${BUILD_MONTH}.${BUILDS_TODAY}.${BUILD_NUMBER}', 
        projectStartDate : '2018-01-01', 
        versionPrefix : 'v1.'
    ])

node {
    git url: 'https://github.com/S62Groep4/PolitieSysteem.git'

    echo 'Change the project version ...'
        def W_M2_HOME = tool 'Maven'
        bat "${W_M2_HOME}\\bin\\mvn versions:set -DnewVersion=$BN -DgenerateBackupPoms=false"

    stage('Initialize'){
        def dockerHome = tool 'Docker'
        def mavenHome  = tool 'Maven3'
        env.PATH = "${dockerHome}/bin:${mavenHome}/bin:${env.PATH}"
    }

    stage('Checkout') {
        checkout scm
    }

    stage('Build'){
        sh "mvn clean install"
    }

    stage('Sonar'){
        try {
            sh "mvn sonar:sonar"
        } catch(error){
            echo "The sonar server could not be reached ${error}"
        }
    }
	
    stage('Artifactory'){
        def server = Artifactory.server 'Artifactory'

        rtMaven = Artifactory.newMavenBuild()
	rtMaven.tool = 'Maven3' // Tool name from Jenkins configuration
	rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
	rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
	rtMaven.deployer.deployArtifacts = true

	buildInfo = Artifactory.newBuildInfo()
	rtMaven.run pom: 'pom.xml', goals: 'clean install', buildInfo: buildInfo
	rtMaven.deployer.deployArtifacts buildInfo
	server.publishBuildInfo buildInfo
    }

    stage('Docker-compose'){
		try {
            sh "sudo docker-compose down"
        }catch(error){}
        try {
            sh "sudo docker-compose down"
        }catch(error){}
        try {
            sh "sudo docker-compose up -d"
        }catch(error){}
    }
}
